<?php
namespace Gruter\ResourceViewer\Tests\Feature;

use Gruter\ResourceViewer\Facades\Resource;
use Gruter\ResourceViewer\Fields\BelongsToMany;
use Gruter\ResourceViewer\Fields\Number;
use Gruter\ResourceViewer\PivotResource;
use Gruter\ResourceViewer\Tests\Fixtures\Categories;
use Gruter\ResourceViewer\Tests\Fixtures\Category;
use Gruter\ResourceViewer\Tests\Fixtures\TestUser;
use Gruter\ResourceViewer\Tests\ResourceTest;
use Illuminate\Database\Eloquent\Relations\Pivot;
use Illuminate\View\View;

class PivotTests extends ResourceTest
{

    private $user;
    private $categories;
    private $pivot;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = factory(TestUser::class)->create();
        $this->categories = factory(Category::class, 3)->create();

        $this->user->categories()->sync($this->categories);

        $this->pivot = $this->user->categories()->withPivot(['id', 'counter'])->get()->last()->pivot;
    }

    public function test_field_display_resource_index(){

        //$this->withoutExceptionHandling();

        $user = factory(TestUser::class)->create();

        $response = $this->get('/testing/users/'.$user->id);

        $response->assertOk();
    }

    public function test_field_initializing(){

        $resource = Resource::find('TestUsers');

        $this->assertNotNull($resource);

        $field = null;
        foreach($resource->getFields() as $f){
            if ($f instanceof BelongsToMany)
                $field = $f;
        }

        $this->assertNotNull($field);

        $view = $field->display($this->user);

        $this->assertInstanceOf(View::class, $view);
        $this->assertArrayHasKey('resource', $view->getData());

        $view->render();

        $resource = $view->getData()['resource'];

        $this->assertInstanceOf(PivotResource::class, $resource);

        $query = $resource->getQuery();

        $this->assertEquals($query->count(), $this->categories->count());

        $models = $resource->getQueryResult($query);

        $this->assertInstanceOf(Pivot::class, $models->first());

        $this->assertTrue(true);
    }

    public function test_pivot_routes(){
        $resource = Resource::find('TestUsers');

        $field = $resource->getField(Categories::class);

        $field->tapResource(function(PivotResource $resource){

            $route = $resource->route('create');
            $this->assertEquals($route, route('resource.create', ['resource' => Categories::uri()]));

            $route = $resource->route('show');
            $this->assertTrue(true);

        });
        $field->display(factory(TestUser::class)->create());


        $this->assertTrue(true);
    }

    public function test_show_pivot_instance(){
        $this->withoutExceptionHandling();

        $route = route('resource.pivot.show', [
            'resource' => 'users',
            'id' => $this->user->id,
            'pivot' => 'custom-pivot-uri',
            'pivotId' => $this->pivot->id,
        ]);

        $response = $this->get($route);

        $response->assertOk();

        $resource = $response->viewData('resource');
        $model = $response->viewData('model');

        $this->assertInstanceOf(PivotResource::class, $resource);
        $this->assertInstanceOf(Pivot::class, $model);

        $this->assertEquals($model->id, $this->pivot->id);

    }

    public function test_update_pivot_instance(){
        $route = route('resource.pivot.update', [
            'resource' => 'users',
            'id' => $this->user->id,
            'pivot' => 'custom-pivot-uri',
            'pivotId' => $this->pivot->id,
        ]);

        $response = $this->put($route, [
            'counter' => 6
        ]);

        $response->assertRedirect();

    }
}   